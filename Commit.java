package gitlet;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

import static java.io.File.separator;

/**
 * Methods which apply to the COMMIT object,
 * including accessor and mutator methods.
 *
 * @author Anastasia Scott
 */
public class Commit implements Serializable {

    /**
     * Constructor called by the init() method
     * to form the initial commit.
     *
     * @param epoch represents the Epoch datestamp.
     * @param m     is the log message generated by
     *              the init() method.
     */
    Commit(Date epoch, String m) {
        SimpleDateFormat date =
                new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");
        _commitTime = date.format(epoch);
        _parent = null;
        _secondParent = null;
        _logMessage = m;
        _blobIndex = new HashMap<String, String>();
    }

    /**
     * The constructor called in the commit method.
     *
     * @param m represents the log message gnereated by the user.
     */
    Commit(String m) {
        SimpleDateFormat date =
                new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");
        _commitTime = date.format(new Date());
        _parent = getHeadSha();
        _secondParent = null;
        _logMessage = m;
        _blobIndex = new HashMap<String, String>();

    }

    /**
     * The constructor called in the merge method.
     * It takes in two arguments: M for the commit message
     * and SP for the Second Parent sha.
     *
     * @param m  represents the log message gnereated by the user.
     * @param sp represents the second parent gnereated by the merge.
     */
    Commit(String m, String sp) {
        SimpleDateFormat date =
                new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");
        _commitTime = date.format(new Date());
        _parent = getHeadSha();
        _secondParent = sp;
        _logMessage = m;
        _blobIndex = new HashMap<String, String>();

    }

    /**
     * Prepares files in staging directory for a commit.
     * Serializes, stores, and logs Blob snapshots and
     * finalizes commit at the time this method is called.
     *
     * @param m is the log message generated by the user.
     */
    public static void commit(String m) throws IOException {

        Commit commit = new Commit(m);
        HashMap<String, String> headIndex = getHeadIndex();
        HashMap<String, String> stgIndex = Staging.getStgIndex();
        commit._blobIndex.putAll(headIndex);

        if (stgIndex.isEmpty()) {
            System.out.println("No changes added to the commit.");
            return;
        }
        for (String i : stgIndex.keySet()) {
            File to = new File(".gitlet" + separator
                    + "blobs" + separator + stgIndex.get(i));
            if (!headIndex.containsKey(i)) {
                commit._blobIndex.put(i, stgIndex.get(i));
                Utils.writeContents(to, stgIndex.get(i));
            } else if (headIndex.containsKey(i)
                    && stgIndex.get(i).substring(0, 5).equals("remove")) {
                commit._blobIndex.remove(i);
            } else if (headIndex.containsKey(stgIndex.get(i))
                    && !stgIndex.get(i).substring(0, 5).equals("remove")) {
                commit._blobIndex.put(i.substring(6), stgIndex.get(i));
                Utils.writeContents(to, stgIndex.get(i));
            }
        }

        byte[] commitShaArray = Utils.serialize(commit);
        File commitFile = new File(".gitlet" + separator + "commits" + separator
                + Utils.sha1(commitShaArray));
        Utils.writeObject(commitFile, commit);

        Utils.writeContents(new File(".gitlet" + separator
                        + "heads" + separator + Branch.getBranchName()),
                Utils.sha1(commitShaArray));
        Staging.resetStaging();
    }

    /**
     * Returns the SHA-1 contained in the Head pointer.
     */
    public static String getHeadSha() {
        File head = new File(".gitlet" + separator + "head");
        File thisBranch = new File(".gitlet" + separator
                + "heads" + separator + Utils.readContentsAsString(head));
        return Utils.readContentsAsString(thisBranch);
    }

    /**
     * Returns the name of the branch contained in the Head pointer.
     */
    public static String getHeadName() {
        return Utils.readContentsAsString(new File(".gitlet"
                + separator + "head"));
    }

    /**
     * Returns the SHA-1 contained in the Head pointer.
     */
    public static HashMap<String, String> getHeadIndex() {
        Commit headCommit = Utils.readObject(
                new File(".gitlet" + separator + "commits"
                        + separator + getHeadSha()), Commit.class);
        HashMap<String, String> headIndex = headCommit.getIndex();
        return headIndex;
    }

    /**
     * Returns the log message for THIS commit.
     */
    public String getMessage() {
        return this._logMessage;
    }

    /**
     * Returns a copy of the parent SHA-1 for THIS commit.
     */
    public String getParent() {
        return this._parent;
    }

    /**
     * Returns a copy of the second parent SHA-1 for THIS commit.
     */
    public String getSecondParent() {
        return this._secondParent;
    }

    /**
     * Returns a copy of the BLOBINDEX hashmap in THIS commit.
     */
    public HashMap<String, String> getIndex() {
        return this._blobIndex;
    }

    /**
     * Sets a specific key, value in the BLOBINDEX hashmap in THIS commit.
     *
     * @param i is the key (filename) of this blob.
     * @param v is the value (sha-1) of this blob.
     */
    public void setIndex(String i, String v) {

        this._blobIndex.put(i, v);
    }

    /**
     * Returns a copy of the BLOBINDEX hashmap in THIS commit.
     */
    public HashMap<String, String> getParentIndex() {
        File parent = new File(".gitlet" + separator
                + "commits" + separator + getParent());
        Commit parentCommit = Utils.readObject(parent, Commit.class);
        return parentCommit.getIndex();
    }

    /**
     * Returns the date stamp for THIS commit.
     */
    public String getCommitTime() {
        return this._commitTime;
    }

    /**
     * Private instance variables representing the
     * parent SHA and the user commited log message for THIS commit.
     */
    private String _parent, _logMessage, _commitTime, _secondParent = null;

    /**
     * Private instance variable which contains a record
     * of all file names and their respective SHA IDs
     * at the time of THIS commit.
     */
    private HashMap<String, String> _blobIndex;
}
